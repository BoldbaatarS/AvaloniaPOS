using Shared.Protos;
using CloudApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Server.Kestrel.Core;

var builder = WebApplication.CreateBuilder(args);

// Kestrel –¥—ç—ç—Ä HTTP/2 –∞—Å–∞–∞–∂ 5001 –¥—ç—ç—Ä —Å–æ–Ω—Å–æ—Ö
builder.WebHost.ConfigureKestrel(options =>
{
    options.ListenAnyIP(5001, listenOptions =>
    {
        listenOptions.Protocols =
            Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http1AndHttp2;

    });
});

// Config —É–Ω—à–∏—Ö
builder.Configuration
    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
    .AddJsonFile($"appsettings.{builder.Environment.EnvironmentName}.json", optional: true)
    .AddEnvironmentVariables();

builder.Services.AddGrpc();
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext<CloudDbContext>(o =>
    o.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"),
    sqlOptions =>
    {
        sqlOptions.CommandTimeout(180);
    }));

builder.Services.AddAutoMapper(typeof(Program));
var app = builder.Build();

// DB migrate –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–∏–π—Ö
using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<CloudDbContext>();
    db.Database.Migrate();
}

// Swagger –∑”©–≤—Ö”©–Ω Development –¥—ç—ç—Ä –∏–¥—ç–≤—Ö—Ç—ç–π –±–æ–ª–≥–æ–∂ –±–æ–ª–Ω–æ
if (app.Environment.IsDevelopment() || app.Environment.IsEnvironment("Docker"))
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
// üìå Middleware-—ç—ç —ç–Ω–¥ –æ—Ä—É—É–ª–Ω–∞
app.UseMiddleware<CloudApi.Middlewares.ExceptionMiddleware>();

app.MapGrpcService<SyncGrpcService>();
app.MapControllers();   // REST API endpoint-—É—É–¥
app.MapGet("/", () => "gRPC server running with MSSQL");



app.Run();
